//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServerClient.WeatherService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WeatherService.IWeatherService")]
    public interface IWeatherService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetName", ReplyAction="http://tempuri.org/IWeatherService/GetNameResponse")]
        string GetName(string sourceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetName", ReplyAction="http://tempuri.org/IWeatherService/GetNameResponse")]
        System.Threading.Tasks.Task<string> GetNameAsync(string sourceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/CurrentWeather", ReplyAction="http://tempuri.org/IWeatherService/CurrentWeatherResponse")]
        string CurrentWeather(string sourceName, string city, string country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/CurrentWeather", ReplyAction="http://tempuri.org/IWeatherService/CurrentWeatherResponse")]
        System.Threading.Tasks.Task<string> CurrentWeatherAsync(string sourceName, string city, string country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/ForecastedWeather", ReplyAction="http://tempuri.org/IWeatherService/ForecastedWeatherResponse")]
        string ForecastedWeather(string sourceName, string city, string country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/ForecastedWeather", ReplyAction="http://tempuri.org/IWeatherService/ForecastedWeatherResponse")]
        System.Threading.Tasks.Task<string> ForecastedWeatherAsync(string sourceName, string city, string country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetWind", ReplyAction="http://tempuri.org/IWeatherService/GetWindResponse")]
        string GetWind(string sourceName, string city, string country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetWind", ReplyAction="http://tempuri.org/IWeatherService/GetWindResponse")]
        System.Threading.Tasks.Task<string> GetWindAsync(string sourceName, string city, string country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/QueryWeather", ReplyAction="http://tempuri.org/IWeatherService/QueryWeatherResponse")]
        string QueryWeather(string sourceName, string city, string country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/QueryWeather", ReplyAction="http://tempuri.org/IWeatherService/QueryWeatherResponse")]
        System.Threading.Tasks.Task<string> QueryWeatherAsync(string sourceName, string city, string country);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWeatherServiceChannel : ServerClient.WeatherService.IWeatherService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WeatherServiceClient : System.ServiceModel.ClientBase<ServerClient.WeatherService.IWeatherService>, ServerClient.WeatherService.IWeatherService {
        
        public WeatherServiceClient() {
        }
        
        public WeatherServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WeatherServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetName(string sourceName) {
            return base.Channel.GetName(sourceName);
        }
        
        public System.Threading.Tasks.Task<string> GetNameAsync(string sourceName) {
            return base.Channel.GetNameAsync(sourceName);
        }
        
        public string CurrentWeather(string sourceName, string city, string country) {
            return base.Channel.CurrentWeather(sourceName, city, country);
        }
        
        public System.Threading.Tasks.Task<string> CurrentWeatherAsync(string sourceName, string city, string country) {
            return base.Channel.CurrentWeatherAsync(sourceName, city, country);
        }
        
        public string ForecastedWeather(string sourceName, string city, string country) {
            return base.Channel.ForecastedWeather(sourceName, city, country);
        }
        
        public System.Threading.Tasks.Task<string> ForecastedWeatherAsync(string sourceName, string city, string country) {
            return base.Channel.ForecastedWeatherAsync(sourceName, city, country);
        }
        
        public string GetWind(string sourceName, string city, string country) {
            return base.Channel.GetWind(sourceName, city, country);
        }
        
        public System.Threading.Tasks.Task<string> GetWindAsync(string sourceName, string city, string country) {
            return base.Channel.GetWindAsync(sourceName, city, country);
        }
        
        public string QueryWeather(string sourceName, string city, string country) {
            return base.Channel.QueryWeather(sourceName, city, country);
        }
        
        public System.Threading.Tasks.Task<string> QueryWeatherAsync(string sourceName, string city, string country) {
            return base.Channel.QueryWeatherAsync(sourceName, city, country);
        }
    }
}
